[{"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/index.tsx":"1","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/App.tsx":"2","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/redux/actions.ts":"3","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson3/Lesson3.tsx":"4","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson3/API.ts":"5","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson3/lesson_3.ts":"6","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/redux/currencyReducer.ts":"7","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson2/lesson2.ts":"8","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/redux/state.ts":"9","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson4/lesson_4.ts":"10","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson4/Lesson4.tsx":"11"},{"size":319,"mtime":1609752860000,"results":"12","hashOfConfig":"13"},{"size":561,"mtime":1619428543091,"results":"14","hashOfConfig":"13"},{"size":1541,"mtime":1617654992316,"results":"15","hashOfConfig":"13"},{"size":1706,"mtime":1619288542140,"results":"16","hashOfConfig":"13"},{"size":440,"mtime":1619287673045,"results":"17","hashOfConfig":"13"},{"size":1126,"mtime":1619418407219,"results":"18","hashOfConfig":"13"},{"size":1304,"mtime":1617651552437,"results":"19","hashOfConfig":"13"},{"size":8491,"mtime":1618227269703,"results":"20","hashOfConfig":"13"},{"size":280,"mtime":1617556480597,"results":"21","hashOfConfig":"13"},{"size":6317,"mtime":1619630639510,"results":"22","hashOfConfig":"13"},{"size":1056,"mtime":1619547944317,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"yg8lnl",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/index.tsx",[],["49","50"],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/App.tsx",[],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/redux/actions.ts",[],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson3/Lesson3.tsx",[],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson3/API.ts",[],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson3/lesson_3.ts",["51","52"],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/redux/currencyReducer.ts",[],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson2/lesson2.ts",["53"],"console.log('lesson 2')\r\n\r\n// Lexical environment\r\n// http://jsflow.org/docs/lex-env/\r\n\r\n//// Closure\r\n// https://learn.javascript.ru/closure\r\n// https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898\r\n// https://www.youtube.com/watch?v=pahO5XjnfLA\r\n\r\n//// Сurrying\r\n// https://learn.javascript.ru/currying-partials\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BA%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-javascript-5ec4a1d88827\r\n\r\n// Pattern Module\r\n// https://habr.com/ru/company/ruvds/blog/419997/\r\n\r\n// Recursion\r\n// https://learn.javascript.ru/recursion\r\n// https://www.youtube.com/watch?v=Kuq6oIN3PH0\r\n\r\n// Task 01\r\n// Реализовать функцию sum которая суммирует 2 числа следующим образом sum(3)(6) === 9\r\n\r\n// const sum = (num: number) => (num2: number) => num + num2\r\n\r\n// console.log(sum(3)(10))\r\n\r\n// Task 02\r\n// Реализовать функцию makeCounter которая работает следующим образом:\r\n// function makeCounter() {\r\n//   let a = 0\r\n//   return () => {\r\n//     return ++a\r\n//   }\r\n// }\r\n\r\n// const counter = makeCounter();\r\n// console.log(counter()); // 1\r\n// console.log(counter()); // 2\r\n// const counter2 = makeCounter();\r\n// console.log(counter2()); // 1\r\n// console.log(counter()); // 3\r\n\r\n\r\n// Task 03\r\n// Переписать функцию из Task 02 так, что бы она принимала число в качестве аргумента и это число было стартовым значением счетчика\r\n// и возвращала следующий объект методов:\r\n// increase: +1\r\n// decrease: -1\r\n// reset: установить счетчик в 0;\r\n// set: установить счетчик в заданное значение;\r\n// function makeCounter(num: number) {\r\n//   return {\r\n//     increase: () => ++num,\r\n//     decrease: () => --num,\r\n//     reset: () => {\r\n//       num = 0\r\n//       return num\r\n//     },\r\n//     set: (x: number) => {\r\n//       num = x\r\n//       return num\r\n//     },\r\n//   }\r\n// }\r\n//\r\n// console.log(makeCounter(2).increase())\r\n// console.log(makeCounter(2).decrease())\r\n// console.log(makeCounter(2).reset())\r\n// console.log(makeCounter(2).set(3))\r\n\r\n//Task from LearnJS\r\n\r\n// У нас есть встроенный метод arr.filter(f) для массивов.\r\n// Он фильтрует все элементы с помощью функции f. Если она возвращает true, то элемент добавится в возвращаемый массив.\r\n// Сделайте набор «готовых к употреблению» фильтров:\r\n\r\n// inBetween(a, b) – между a и b (включительно).\r\n// inArray([...]) – находится в данном массиве.\r\n//   Они должны использоваться таким образом:\r\n\r\n// arr.filter(inBetween(3,6)) – выбирает только значения между 3 и 6 (включительно).\r\n// arr.filter(inArray([1,2,3])) – выбирает только элементы, совпадающие с одним из элементов массива\r\n\r\n// function inBetween(a: number, b: number) {\r\n//   return function (x: number) {\r\n//     return x >= a && x <= b\r\n//   }\r\n// }\r\n//\r\n// function inArray(arr: number[]) {\r\n//   return function (x: number) {\r\n//     return arr.includes(x)\r\n//   }\r\n// }\r\n//\r\n// let arr = [1, 2, 3, 4, 5, 6, 7]\r\n\r\n// alert(arr.filter(inBetween(3, 6))) // 3,4,5,6\r\n\r\n// alert(arr.filter(inArray([1, 2, 10]))) // 1,2\r\n\r\n// У нас есть массив объектов, который нужно отсортировать:\r\n\r\n// let users = [\r\n//   {name: 'John', age: 20, surname: 'Johnson'},\r\n//   {name: 'Pete', age: 18, surname: 'Peterson'},\r\n//   {name: 'Ann', age: 19, surname: 'Hathaway'},\r\n// ]\r\n// Обычный способ был бы таким:\r\n\r\n// по имени (Ann, John, Pete)\r\n//   users.sort((a, b) => a.name > b.name ? 1 : -1);\r\n\r\n// по возрасту (Pete, Ann, John)\r\n// users.sort((a, b) => a.age > b.age ? 1 : -1);\r\n// Можем ли мы сделать его короче, скажем, вот таким?\r\n\r\n// console.log(users.sort(byField('name')))\r\n// console.log(users.sort(byField('age')))\r\n// То есть, чтобы вместо функции, мы просто писали byField(fieldName).\r\n//\r\n//   Напишите функцию byField, которая может быть использована для этого.\r\n\r\n// function byField(sortName: string) {\r\n//   return (a: any, b: any) => a[sortName] > b[sortName] ? 1 : -1\r\n// }\r\n\r\n// function makeArmy() {\r\n//   let shooters = []\r\n//\r\n//   let i = 0\r\n//   while (i < 10) {\r\n//     let x = i\r\n//     let shooter = function () { // функция shooter\r\n//       alert(x) // должна выводить порядковый номер\r\n//     }\r\n//     shooters.push(shooter)\r\n//     i++\r\n//   }\r\n//   return shooters\r\n// }\r\n//\r\n// let army = makeArmy()\r\n//\r\n// console.log(army[0]()) // у 0-го стрелка будет номер 10\r\n// console.log(army[5]()) // и у 5-го стрелка тоже будет номер 10\r\n\r\n\r\n// Task 04*\r\n// Реализовать функцию superSum которая принимает число в качестве аргумента, которое указывает на количество слагаемых\r\n// и что бы корректно работали следующие вызовы:\r\n// 1) superSum(0) //0\r\n// 2) superSum(3)(2)(5)(3) //10\r\n// 3) superSum(3)(2)(5,3) //10\r\n// 4) superSum(3)(2,5,3) //10\r\n// 5) superSum(3)(2,5)(3) //10\r\n// 6) superSum(3)(2,5)(3,9) //10\r\n\r\n// function superSum(num: number) {\r\n//   debugger\r\n//   if (num === 0) return 0\r\n//   if (num === 1) return (n: number) => n\r\n//\r\n//   let _arguments: number[] = []\r\n//\r\n//   function helper(...args: number[]): any {\r\n//     _arguments = [..._arguments, ...args]\r\n//\r\n//     if (_arguments.length >= num) {\r\n//       _arguments.length = num\r\n//       return _arguments.reduce((acc, v) => acc + v)\r\n//     } else {\r\n//       return helper\r\n//     }\r\n//   }\r\n//\r\n//   return helper\r\n// }\r\n\r\n// console.log(superSum(0)) //0\r\n//@ts-ignore\r\n// console.log(superSum(1)(2)) //0\r\n//@ts-ignore\r\n// console.log(superSum(3)(2)(5)(3)) //10\r\n//@ts-ignore\r\n// console.log(superSum(3)(2, 5)(3, 7)) //10\r\n\r\n// P.S. типизируйте только аргументы, а при вызове функции используйте @ts-ignore\r\n\r\n// Task 05\r\n// решить все задачи по рекурсии которые даны в конце статьи https://learn.javascript.ru/recursion\r\n\r\n// Task 06\r\n// написать функцию, которая повторяет функционал метода flat массива на всю глубину.\r\n\r\n// для одномерного массива\r\n// function flat(arr: any) {\r\n//   return arr.reduce((acc: any, v: any) => acc.concat(v), [])\r\n// }\r\n\r\n// для многомерного массива с помощью рекурсии\r\n// function flat(arr: any, d: number = 1) {\r\n//   debugger\r\n//   return d > 0 ? arr.reduce((acc: any, v: any) => acc.concat(Array.isArray(v) ? flat(v, d - 1) : v), []) : arr.slice()\r\n// }\r\n\r\n// не рекурсивное упрощение с использованием стека\r\n// function flat(arr: any) {\r\n//   const stack = [...arr]\r\n//   const result = []\r\n//\r\n//   while (stack.length) {\r\n//     const next = stack.pop()\r\n//     if (Array.isArray(next)) {\r\n//       stack.push(...next)\r\n//     } else {\r\n//       result.push(next)\r\n//     }\r\n//   }\r\n//   return result.reverse()\r\n// }\r\n\r\n// рекурсивно упрощаем массив\r\n\r\nfunction flat(arr: []) {\r\n  let flattend: [] = []\r\n  \r\n  function flatted(arr: []) {\r\n    arr.forEach((v) => {\r\n      if (Array.isArray(v)) flatted(v)\r\n      else flattend.push(v)\r\n    })\r\n  }\r\n  \r\n  flatted(arr)\r\n  return flattend\r\n}\r\n\r\n//@ts-ignore\r\nconsole.log(flat([[10, 20, [30, [8, 9, [7, [9, 8]]]]], 1, 2, [3, 4, [5, 6]]]))\r\n\r\n// just a plug\r\nexport default () => {\r\n};","/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/redux/state.ts",[],["54","55"],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson4/lesson_4.ts",["56","57"],"/mnt/e/reactProjects/typescript-projects/JS_Lessons/src/lessons/lesson4/Lesson4.tsx",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":19,"column":7,"nodeType":"64","messageId":"65","endLine":19,"endColumn":15},{"ruleId":"66","severity":1,"message":"67","line":38,"column":1,"nodeType":"68","endLine":38,"endColumn":24},{"ruleId":"66","severity":1,"message":"67","line":246,"column":1,"nodeType":"68","endLine":247,"endColumn":3},{"ruleId":"58","replacedBy":"69"},{"ruleId":"60","replacedBy":"70"},{"ruleId":"62","severity":1,"message":"71","line":1,"column":10,"nodeType":"64","messageId":"65","endLine":1,"endColumn":16},{"ruleId":"66","severity":1,"message":"67","line":143,"column":1,"nodeType":"68","endLine":143,"endColumn":24},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'instance' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["72"],["73"],"'useRef' is defined but never used.","no-global-assign","no-unsafe-negation"]